// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	snap "github.com/midtrans/midtrans-go/snap"
)

// PaymentService is an autogenerated mock type for the PaymentService type
type PaymentService struct {
	mock.Mock
}

// ConfirmedPayment provides a mock function with given fields: orderID
func (_m *PaymentService) ConfirmedPayment(orderID string) error {
	ret := _m.Called(orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfirmedPaymentEmail provides a mock function with given fields: orderID
func (_m *PaymentService) ConfirmedPaymentEmail(orderID string) error {
	ret := _m.Called(orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePayment provides a mock function with given fields: reservationID
func (_m *PaymentService) CreatePayment(reservationID string) (*snap.Response, string, string, error) {
	ret := _m.Called(reservationID)

	var r0 *snap.Response
	var r1 string
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(string) (*snap.Response, string, string, error)); ok {
		return rf(reservationID)
	}
	if rf, ok := ret.Get(0).(func(string) *snap.Response); ok {
		r0 = rf(reservationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*snap.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(reservationID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) string); ok {
		r2 = rf(reservationID)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(reservationID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// SendEmail provides a mock function with given fields: recipientEmail, orderID, paymentToken
func (_m *PaymentService) SendEmail(recipientEmail string, orderID string, paymentToken string) error {
	ret := _m.Called(recipientEmail, orderID, paymentToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(recipientEmail, orderID, paymentToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessage provides a mock function with given fields: token, paymentToken, orderID
func (_m *PaymentService) SendMessage(token string, paymentToken string, orderID string) error {
	ret := _m.Called(token, paymentToken, orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(token, paymentToken, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentService creates a new instance of PaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentService {
	mock := &PaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
