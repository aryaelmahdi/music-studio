// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	reservations "project/features/reservations"

	mock "github.com/stretchr/testify/mock"
)

// ReservationData is an autogenerated mock type for the ReservationData type
type ReservationData struct {
	mock.Mock
}

// AddReservation provides a mock function with given fields: newData
func (_m *ReservationData) AddReservation(newData reservations.Reservation) (*reservations.Reservation, error) {
	ret := _m.Called(newData)

	var r0 *reservations.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(reservations.Reservation) (*reservations.Reservation, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(reservations.Reservation) *reservations.Reservation); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reservations.Reservation)
		}
	}

	if rf, ok := ret.Get(1).(func(reservations.Reservation) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReservation provides a mock function with given fields: id
func (_m *ReservationData) DeleteReservation(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllReservations provides a mock function with given fields:
func (_m *ReservationData) GetAllReservations() (*reservations.AllReservations, error) {
	ret := _m.Called()

	var r0 *reservations.AllReservations
	var r1 error
	if rf, ok := ret.Get(0).(func() (*reservations.AllReservations, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *reservations.AllReservations); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reservations.AllReservations)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationByID provides a mock function with given fields: id
func (_m *ReservationData) GetReservationByID(id string) (*reservations.Reservation, error) {
	ret := _m.Called(id)

	var r0 *reservations.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*reservations.Reservation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *reservations.Reservation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reservations.Reservation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationsByUsername provides a mock function with given fields: username
func (_m *ReservationData) GetReservationsByUsername(username string) (map[string]interface{}, error) {
	ret := _m.Called(username)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsRoomValid provides a mock function with given fields: roomID
func (_m *ReservationData) IsRoomValid(roomID string) (bool, map[string]interface{}, error) {
	ret := _m.Called(roomID)

	var r0 bool
	var r1 map[string]interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (bool, map[string]interface{}, error)); ok {
		return rf(roomID)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(roomID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) map[string]interface{}); ok {
		r1 = rf(roomID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(roomID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateReservation provides a mock function with given fields: reservationID, newData
func (_m *ReservationData) UpdateReservation(reservationID string, newData map[string]interface{}) (*reservations.Reservation, error) {
	ret := _m.Called(reservationID, newData)

	var r0 *reservations.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) (*reservations.Reservation, error)); ok {
		return rf(reservationID, newData)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) *reservations.Reservation); ok {
		r0 = rf(reservationID, newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reservations.Reservation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(reservationID, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReservationData creates a new instance of ReservationData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReservationData(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReservationData {
	mock := &ReservationData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
