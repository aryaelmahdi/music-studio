// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	instruments "project/features/instruments"

	jwt "github.com/golang-jwt/jwt/v5"

	mock "github.com/stretchr/testify/mock"

	rooms "project/features/rooms"
)

// RoomService is an autogenerated mock type for the RoomService type
type RoomService struct {
	mock.Mock
}

// AddRoom provides a mock function with given fields: newRoom, token
func (_m *RoomService) AddRoom(newRoom rooms.Rooms, token *jwt.Token) (*rooms.Rooms, error) {
	ret := _m.Called(newRoom, token)

	var r0 *rooms.Rooms
	var r1 error
	if rf, ok := ret.Get(0).(func(rooms.Rooms, *jwt.Token) (*rooms.Rooms, error)); ok {
		return rf(newRoom, token)
	}
	if rf, ok := ret.Get(0).(func(rooms.Rooms, *jwt.Token) *rooms.Rooms); ok {
		r0 = rf(newRoom, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rooms.Rooms)
		}
	}

	if rf, ok := ret.Get(1).(func(rooms.Rooms, *jwt.Token) error); ok {
		r1 = rf(newRoom, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddRoomInstrument provides a mock function with given fields: roomId, instrumentData, token
func (_m *RoomService) AddRoomInstrument(roomId string, instrumentData instruments.RoomInstrument, token *jwt.Token) (interface{}, error) {
	ret := _m.Called(roomId, instrumentData, token)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, instruments.RoomInstrument, *jwt.Token) (interface{}, error)); ok {
		return rf(roomId, instrumentData, token)
	}
	if rf, ok := ret.Get(0).(func(string, instruments.RoomInstrument, *jwt.Token) interface{}); ok {
		r0 = rf(roomId, instrumentData, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, instruments.RoomInstrument, *jwt.Token) error); ok {
		r1 = rf(roomId, instrumentData, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoom provides a mock function with given fields: roomID, token
func (_m *RoomService) DeleteRoom(roomID string, token *jwt.Token) (interface{}, error) {
	ret := _m.Called(roomID, token)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *jwt.Token) (interface{}, error)); ok {
		return rf(roomID, token)
	}
	if rf, ok := ret.Get(0).(func(string, *jwt.Token) interface{}); ok {
		r0 = rf(roomID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, *jwt.Token) error); ok {
		r1 = rf(roomID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterRoomByPrice provides a mock function with given fields: price, page, pageSize
func (_m *RoomService) FilterRoomByPrice(price int, page int, pageSize int) ([]map[string]interface{}, error) {
	ret := _m.Called(price, page, pageSize)

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, int) ([]map[string]interface{}, error)); ok {
		return rf(price, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) []map[string]interface{}); ok {
		r0 = rf(price, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(price, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllRooms provides a mock function with given fields: page, pageSize
func (_m *RoomService) GetAllRooms(page int, pageSize int) ([]map[string]interface{}, error) {
	ret := _m.Called(page, pageSize)

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]map[string]interface{}, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []map[string]interface{}); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookedRooms provides a mock function with given fields: page, pageSize
func (_m *RoomService) GetBookedRooms(page int, pageSize int) ([]map[string]interface{}, error) {
	ret := _m.Called(page, pageSize)

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]map[string]interface{}, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []map[string]interface{}); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendation provides a mock function with given fields: genre1, genre2
func (_m *RoomService) GetRecommendation(genre1 string, genre2 string) (interface{}, error) {
	ret := _m.Called(genre1, genre2)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (interface{}, error)); ok {
		return rf(genre1, genre2)
	}
	if rf, ok := ret.Get(0).(func(string, string) interface{}); ok {
		r0 = rf(genre1, genre2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(genre1, genre2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoomByID provides a mock function with given fields: roomID
func (_m *RoomService) GetRoomByID(roomID string) (*rooms.Rooms, error) {
	ret := _m.Called(roomID)

	var r0 *rooms.Rooms
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*rooms.Rooms, error)); ok {
		return rf(roomID)
	}
	if rf, ok := ret.Get(0).(func(string) *rooms.Rooms); ok {
		r0 = rf(roomID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rooms.Rooms)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoom provides a mock function with given fields: roomID, updatedRoom, token
func (_m *RoomService) UpdateRoom(roomID string, updatedRoom rooms.Rooms, token *jwt.Token) (*rooms.Rooms, error) {
	ret := _m.Called(roomID, updatedRoom, token)

	var r0 *rooms.Rooms
	var r1 error
	if rf, ok := ret.Get(0).(func(string, rooms.Rooms, *jwt.Token) (*rooms.Rooms, error)); ok {
		return rf(roomID, updatedRoom, token)
	}
	if rf, ok := ret.Get(0).(func(string, rooms.Rooms, *jwt.Token) *rooms.Rooms); ok {
		r0 = rf(roomID, updatedRoom, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rooms.Rooms)
		}
	}

	if rf, ok := ret.Get(1).(func(string, rooms.Rooms, *jwt.Token) error); ok {
		r1 = rf(roomID, updatedRoom, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRoomService creates a new instance of RoomService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoomService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoomService {
	mock := &RoomService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
