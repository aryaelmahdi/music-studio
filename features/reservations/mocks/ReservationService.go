// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	reservations "project/features/reservations"
)

// ReservationService is an autogenerated mock type for the ReservationService type
type ReservationService struct {
	mock.Mock
}

// AddReservation provides a mock function with given fields: newData, token
func (_m *ReservationService) AddReservation(newData reservations.Reservation, token *jwt.Token) (*reservations.Reservation, error) {
	ret := _m.Called(newData, token)

	var r0 *reservations.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(reservations.Reservation, *jwt.Token) (*reservations.Reservation, error)); ok {
		return rf(newData, token)
	}
	if rf, ok := ret.Get(0).(func(reservations.Reservation, *jwt.Token) *reservations.Reservation); ok {
		r0 = rf(newData, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reservations.Reservation)
		}
	}

	if rf, ok := ret.Get(1).(func(reservations.Reservation, *jwt.Token) error); ok {
		r1 = rf(newData, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReservation provides a mock function with given fields: id, token
func (_m *ReservationService) DeleteReservation(id string, token *jwt.Token) error {
	ret := _m.Called(id, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *jwt.Token) error); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllReservations provides a mock function with given fields: token
func (_m *ReservationService) GetAllReservations(token *jwt.Token) (*reservations.AllReservations, error) {
	ret := _m.Called(token)

	var r0 *reservations.AllReservations
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token) (*reservations.AllReservations, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) *reservations.AllReservations); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reservations.AllReservations)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationByID provides a mock function with given fields: id, token
func (_m *ReservationService) GetReservationByID(id string, token *jwt.Token) (*reservations.Reservation, error) {
	ret := _m.Called(id, token)

	var r0 *reservations.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *jwt.Token) (*reservations.Reservation, error)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, *jwt.Token) *reservations.Reservation); ok {
		r0 = rf(id, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reservations.Reservation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *jwt.Token) error); ok {
		r1 = rf(id, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationsByUsername provides a mock function with given fields: token
func (_m *ReservationService) GetReservationsByUsername(token *jwt.Token) (map[string]interface{}, error) {
	ret := _m.Called(token)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token) (map[string]interface{}, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) map[string]interface{}); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReservation provides a mock function with given fields: id, newData, token
func (_m *ReservationService) UpdateReservation(id string, newData reservations.Reservation, token *jwt.Token) (*reservations.Reservation, error) {
	ret := _m.Called(id, newData, token)

	var r0 *reservations.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, reservations.Reservation, *jwt.Token) (*reservations.Reservation, error)); ok {
		return rf(id, newData, token)
	}
	if rf, ok := ret.Get(0).(func(string, reservations.Reservation, *jwt.Token) *reservations.Reservation); ok {
		r0 = rf(id, newData, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reservations.Reservation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, reservations.Reservation, *jwt.Token) error); ok {
		r1 = rf(id, newData, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReservationService creates a new instance of ReservationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReservationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReservationService {
	mock := &ReservationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
