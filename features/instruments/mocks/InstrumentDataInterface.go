// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	instruments "project/features/instruments"

	mock "github.com/stretchr/testify/mock"
)

// InstrumentDataInterface is an autogenerated mock type for the InstrumentDataInterface type
type InstrumentDataInterface struct {
	mock.Mock
}

// AddInstrument provides a mock function with given fields: newData
func (_m *InstrumentDataInterface) AddInstrument(newData instruments.Instruments) (*instruments.Instruments, error) {
	ret := _m.Called(newData)

	var r0 *instruments.Instruments
	var r1 error
	if rf, ok := ret.Get(0).(func(instruments.Instruments) (*instruments.Instruments, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(instruments.Instruments) *instruments.Instruments); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*instruments.Instruments)
		}
	}

	if rf, ok := ret.Get(1).(func(instruments.Instruments) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstrument provides a mock function with given fields: id
func (_m *InstrumentDataInterface) DeleteInstrument(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllInstruments provides a mock function with given fields:
func (_m *InstrumentDataInterface) GetAllInstruments() (map[string]map[string]interface{}, error) {
	ret := _m.Called()

	var r0 map[string]map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]map[string]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstrumentByID provides a mock function with given fields: id
func (_m *InstrumentDataInterface) GetInstrumentByID(id string) (*instruments.Instruments, error) {
	ret := _m.Called(id)

	var r0 *instruments.Instruments
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*instruments.Instruments, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *instruments.Instruments); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*instruments.Instruments)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsInstrumentExist provides a mock function with given fields: instrumentName
func (_m *InstrumentDataInterface) IsInstrumentExist(instrumentName string) bool {
	ret := _m.Called(instrumentName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(instrumentName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateInstrument provides a mock function with given fields: id, newData
func (_m *InstrumentDataInterface) UpdateInstrument(id string, newData instruments.Instruments) (*instruments.Instruments, error) {
	ret := _m.Called(id, newData)

	var r0 *instruments.Instruments
	var r1 error
	if rf, ok := ret.Get(0).(func(string, instruments.Instruments) (*instruments.Instruments, error)); ok {
		return rf(id, newData)
	}
	if rf, ok := ret.Get(0).(func(string, instruments.Instruments) *instruments.Instruments); ok {
		r0 = rf(id, newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*instruments.Instruments)
		}
	}

	if rf, ok := ret.Get(1).(func(string, instruments.Instruments) error); ok {
		r1 = rf(id, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInstrumentDataInterface creates a new instance of InstrumentDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInstrumentDataInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *InstrumentDataInterface {
	mock := &InstrumentDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
